// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// This code is based on the study you can find here: https://kodify.net/tradingview/indicators/dema/
// Â© zeguela
//@version=4
strategy(title="ZEGUELA DEMALONG", commission_value=0.070, commission_type=strategy.commission.percent, initial_capital=100, default_qty_value=90, default_qty_type=strategy.percent_of_equity, overlay=true, process_orders_on_close=true)

// Step 1. Script settings

// Input options
_srcData = input(title="Source Data", type=input.source, defval=close)

// Length settings
len1 = input(title="Length DEMA #1", type=input.integer, defval=8, minval=1)
len2 = input(title="Length DEMA #2", type=input.integer, defval=24, minval=0)
len3 = input(title="Length DEMA #3", type=input.integer, defval=0, minval=0)

// Step 2. Calculate indicator values
// Function that calculates the DEMA
DEMA(series, length) =>
    if (length > 0)
        emaValue = ema(series, length)
        2 * emaValue - ema(emaValue, length)
    else
        na

// Calculate the DEMA values
demaVal1 = DEMA(_srcData, len1)
demaVal2 = DEMA(_srcData, len2)
demaVal3 = DEMA(_srcData, len3)

// Step 3. Determine indicator signals
// See if there's a DEMA crossover
demaCrossover = if (len2 > 0) and (len3 > 0)
    crossover(demaVal1, demaVal2) and (demaVal3 > demaVal3[1])
else
    if (len2 > 0) and (len3 == 0)
        crossover(demaVal1, demaVal2)
    else
        if (len3 > 0) and (len2 == 0)
            crossover(demaVal1, demaVal3)
        else
            crossover(close, demaVal1)

// Check if there's a DEMA crossunder
demaCrossunder = if (len2 > 0) and (len3 > 0)
    crossunder(demaVal1, demaVal2) and (demaVal3 < demaVal3[1])
else
    if (len2 > 0) and (len3 == 0)
        crossunder(demaVal1, demaVal2)
    else
        if (len3 > 0) and (len2 == 0)
            crossunder(demaVal1, demaVal3)
        else
            crossunder(close, demaVal1)

// Step 4. Output indicator data
// Plot DEMAs on the chart
plot(series=demaVal1, color=color.green, linewidth=2, title="DEMA #1")
plot(series=demaVal2, color=color.red, linewidth=2, title="DEMA #2")
plot(series=demaVal3, color=color.fuchsia, linewidth=2, title="DEMA #3")


//Plot the box with position and P&L
posColor = color.new(color.green, 50)
negColor = color.new(color.red, 50)
dftColor = color.new(color.blue, 75)
posProfit= (strategy.position_size > 0) ? (close * 100 / strategy.position_avg_price - 100) : strategy.position_size < 0 ? (strategy.position_avg_price * 100 / close - 100) : 0.0
posDir   = (strategy.position_size  > 0) ? "long" : strategy.position_size < 0 ? "short" : "flat"
posCol   = (posProfit > 0) ? posColor : (posProfit < 0) ? negColor : dftColor

//Open trade Box
var label lb = na
label.delete(lb)
lb := label.new(bar_index, max(high, highest(4)[1]), textcolor=color.white,
   color=posCol,
   text="Pos: "+ posDir +
      "\nPnL: "+tostring(posProfit, "#.##")+"%" +
      "\nAvg Price: "+tostring(strategy.position_avg_price, "#.####") +
      "\nClose: "+tostring(close, "#.####"))

//Closed trades boxes
if demaCrossunder
    var label lL = na
    lL := label.new(bar_index, max(high, highest(4)[1]), textcolor=color.white, yloc=yloc.belowbar, style=label.style_label_up,
       color=posCol,
       text="Pos: "+ posDir +
          "\nPnL: "+tostring(posProfit, "#.##")+"%" +
          "\nAvg Price: "+tostring(strategy.position_avg_price, "#.####") +
          "\nClose: "+tostring(close, "#.####"))

//Plot PnL area
p1=plot(strategy.position_avg_price, color=color.blue, style=plot.style_linebr, linewidth=2, title="Entry Price")
p2=plot(series=strategy.position_size > 0 ? close : na, color=posCol, style=plot.style_linebr, linewidth=1, title="Long TP")
fill(p1, p2, color=posCol)

//Plot entru long circle sign
plotshape(demaCrossover, color=color.blue, style=shape.circle, size=size.small, textcolor=color.white)

// Step 5. Strategy setup
// Make input options that configure backtest date range
_startDate = input(title="Start Date", type=input.integer,
     defval=1, minval=1, maxval=31, group="BackTest Period")
_startMonth = input(title="Start Month", type=input.integer,
     defval=4, minval=1, maxval=12, group="BackTest Period")
_startYear = input(title="Start Year", type=input.integer,
     defval=2021, minval=1800, maxval=2100, group="BackTest Period")

_endDate = input(title="End Date", type=input.integer,
     defval=31, minval=1, maxval=31, group="BackTest Period")
_endMonth = input(title="End Month", type=input.integer,
     defval=12, minval=1, maxval=12, group="BackTest Period")
_endYear = input(title="End Year", type=input.integer,
     defval=2031, minval=1800, maxval=2100, group="BackTest Period")

// Look if the close time of the current bar
// falls inside the date range
_inDateRange = (time >= timestamp(syminfo.timezone, _startYear,
         _startMonth, _startDate, 0, 0)) and
     (time < timestamp(syminfo.timezone, _endYear, _endMonth, _endDate, 0, 0))
  
//Alert configuration     
_alertMessageOpenLong="put your message here"
_alertMessageCloseLong="put your message here"
_alertmessageExitLong="put your message here"
_alertmessageTPLong="put your message here"

// Step 6. Strategy Execution
if (_inDateRange)
    if (demaCrossover)
        strategy.entry("LONG", strategy.long, comment = "ENTER LONG", alert_message=_alertMessageOpenLong)
    if (demaCrossunder)
        strategy.close(id="LONG", when=strategy.position_size != 0, comment = "EXIT LONG", alert_message=_alertmessageExitLong)

// Exit open market position when date range ends
if (not _inDateRange)
    strategy.close_all()
    
